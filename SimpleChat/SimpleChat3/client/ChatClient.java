	// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import java.util.*;import com.lloseng.ocsf.client.*;import common.*;import java.io.*;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract superclass * in order to give more functionality to the client. *  * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {	// Instance variables **********************************************	/**	 * The interface type variable. It allows the implementation of the display	 * method in the client.	 */	ChatIF clientUI;	ObservableClient clientObs;	String id;	// Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 * 	 * @param host	 *            The server to connect to.	 * @param port	 *            The port number to connect on.	 * @param clientUI	 *            The interface type variable.	 */	public ChatClient(String host, String id, int port, ChatIF clientUI)			throws IOException {		clientObs = new ObservableClient(host,port);		clientObs.addObserver(this);		this.clientUI = clientUI;		this.id = id;	}	// Instance methods ************************************************	/**	 * This method handles all data that comes in from the server.	 * 	 * @param msg	 *            The message from the server.	 */	public void handleMessageFromServer(Object msg) {		update(clientObs, msg);	}		/**	 * This method handles all data coming from the UI	 * 	 * @param message	 *            The message from the UI.	 */	public void handleMessageFromClientUI(String message) {		if (message.startsWith(Character.toString('#'))) {			handleCmdClientUI(message);		} else {			try {				clientObs.sendToServer(message);			} catch (IOException e) {				clientUI.display("Could not send message to server.  Terminating client.");				quit();			}		}	}	public void handleCmdClientUI(String cmd) {		if (cmd.startsWith("#quit")) {			if (this.clientObs.isConnected()) {				clientUI.display("Deconnexion en cours...");				logOff();			}			System.exit(0);		} else if (cmd.startsWith("#logoff")) {			if (this.clientObs.isConnected()) {				clientUI.display("Deconnexion en cours...");				logOff();			} else {				clientUI.display("Vous n'etes pas connecter a un serveur");			}		} else if (cmd.startsWith("#sethost")) {			if (this.clientObs.isConnected()) {				clientUI.display("Cette fonction est indisponible lorsque vous etes connecte");			} else {				clientObs.setHost(cmd.substring(9));				clientUI.display("L'host a ete modifie");			}		} else if (cmd.startsWith("#setport")) {			if (this.clientObs.isConnected()) {				clientUI.display("Cette fonction est indisponible lorsque vous etes connecte");			} else {				clientObs.setPort(Integer.parseInt(cmd.substring(9)));				clientUI.display("Le port a ete modifie");			}		} else if (cmd.startsWith("#login")) {			if (this.clientObs.isConnected()) {				clientUI.display("Cette fonction est indisponible lorsque vous etes connecte");			} else {				try {					clientObs.openConnection();					this.id = cmd.substring(7);					clientObs.sendToServer("#login "+id);				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}		} else if (cmd.startsWith("#getport")) {			clientUI.display("Le port est : " + clientObs.getPort());		} else if (cmd.startsWith("#gethost")) {			clientUI.display("L'host est : " + clientObs.getHost());		}	}	/**	 * This method terminates the client.	 */	public void logOff() {		try {			clientObs.sendToServer("#logoff");			clientObs.closeConnection();		} catch (IOException e) {			clientUI.display("Could not send message to server.  Terminating client.");			quit();		}	}	public void quit() {		try {			clientObs.closeConnection();		} catch (IOException e) {		}		System.exit(0);	}	protected void connectionException(Exception exception) {		clientUI.display("Une erreur est survenue et le serveur a ferme");		System.exit(0);	}		public void update(Observable clientObs, Object msg) {			clientUI.display(msg.toString());	}	}// End of ChatClient class